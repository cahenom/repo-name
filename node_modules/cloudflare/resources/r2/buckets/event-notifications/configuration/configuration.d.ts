import { APIResource } from "../../../../../resource.js";
import * as Core from "../../../../../core.js";
import * as QueuesAPI from "./queues.js";
import { QueueDeleteParams, QueueDeleteResponse, QueueUpdateParams, QueueUpdateResponse, Queues } from "./queues.js";
export declare class Configuration extends APIResource {
    queues: QueuesAPI.Queues;
    /**
     * List all event notification rules for a bucket.
     */
    get(bucketName: string, params: ConfigurationGetParams, options?: Core.RequestOptions): Core.APIPromise<ConfigurationGetResponse>;
}
export interface ConfigurationGetResponse {
    /**
     * Name of the bucket.
     */
    bucketName?: string;
    /**
     * List of queues associated with the bucket.
     */
    queues?: Array<ConfigurationGetResponse.Queue>;
}
export declare namespace ConfigurationGetResponse {
    interface Queue {
        /**
         * Queue ID
         */
        queueId?: string;
        /**
         * Name of the queue
         */
        queueName?: string;
        rules?: Array<Queue.Rule>;
    }
    namespace Queue {
        interface Rule {
            /**
             * Array of R2 object actions that will trigger notifications
             */
            actions: Array<'PutObject' | 'CopyObject' | 'DeleteObject' | 'CompleteMultipartUpload' | 'LifecycleDeletion'>;
            /**
             * Timestamp when the rule was created
             */
            createdAt?: string;
            /**
             * A description that can be used to identify the event notification rule after
             * creation
             */
            description?: string;
            /**
             * Notifications will be sent only for objects with this prefix
             */
            prefix?: string;
            /**
             * Rule ID
             */
            ruleId?: string;
            /**
             * Notifications will be sent only for objects with this suffix
             */
            suffix?: string;
        }
    }
}
export interface ConfigurationGetParams {
    /**
     * Path param: Account ID
     */
    account_id: string;
    /**
     * Header param: The bucket jurisdiction
     */
    jurisdiction?: 'default' | 'eu' | 'fedramp';
}
export declare namespace Configuration {
    export { type ConfigurationGetResponse as ConfigurationGetResponse, type ConfigurationGetParams as ConfigurationGetParams, };
    export { Queues as Queues, type QueueUpdateResponse as QueueUpdateResponse, type QueueDeleteResponse as QueueDeleteResponse, type QueueUpdateParams as QueueUpdateParams, type QueueDeleteParams as QueueDeleteParams, };
}
//# sourceMappingURL=configuration.d.ts.map