import { APIResource } from "../../../resource.js";
import * as Core from "../../../core.js";
import * as ViewsAPI from "./views.js";
import { ViewCreateParams, ViewCreateResponse, ViewDeleteParams, ViewDeleteResponse, ViewEditParams, ViewEditResponse, ViewGetParams, ViewGetResponse, ViewListParams, ViewListResponse, ViewListResponsesV4PagePaginationArray, Views } from "./views.js";
export declare class Settings extends APIResource {
    views: ViewsAPI.Views;
    /**
     * Update DNS settings for an account or zone
     */
    edit(params: SettingEditParams, options?: Core.RequestOptions): Core.APIPromise<SettingEditResponse>;
    /**
     * Show DNS settings for an account or zone
     */
    get(params?: SettingGetParams, options?: Core.RequestOptions): Core.APIPromise<SettingGetResponse>;
    get(options?: Core.RequestOptions): Core.APIPromise<SettingGetResponse>;
}
export interface DNSSetting {
    /**
     * Whether to flatten all CNAME records in the zone. Note that, due to DNS
     * limitations, a CNAME record at the zone apex will always be flattened.
     */
    flatten_all_cnames?: boolean;
    /**
     * Whether to enable Foundation DNS Advanced Nameservers on the zone.
     */
    foundation_dns?: boolean;
    /**
     * Whether to enable multi-provider DNS, which causes Cloudflare to activate the
     * zone even when non-Cloudflare NS records exist, and to respect NS records at the
     * zone apex during outbound zone transfers.
     */
    multi_provider?: boolean;
    /**
     * The time to live (TTL) of the zone's nameserver (NS) records.
     */
    ns_ttl?: number;
    /**
     * Allows a Secondary DNS zone to use (proxied) override records and CNAME
     * flattening at the zone apex.
     */
    secondary_overrides?: boolean;
    /**
     * Components of the zone's SOA record.
     */
    soa?: DNSSetting.SOA;
    /**
     * Whether the zone mode is a regular or CDN/DNS only zone.
     */
    zone_mode?: 'standard' | 'cdn_only' | 'dns_only';
}
export declare namespace DNSSetting {
    /**
     * Components of the zone's SOA record.
     */
    interface SOA {
        /**
         * Time in seconds of being unable to query the primary server after which
         * secondary servers should stop serving the zone.
         */
        expire: number;
        /**
         * The time to live (TTL) for negative caching of records within the zone.
         */
        min_ttl: number;
        /**
         * The primary nameserver, which may be used for outbound zone transfers.
         */
        mname: string;
        /**
         * Time in seconds after which secondary servers should re-check the SOA record to
         * see if the zone has been updated.
         */
        refresh: number;
        /**
         * Time in seconds after which secondary servers should retry queries after the
         * primary server was unresponsive.
         */
        retry: number;
        /**
         * The email address of the zone administrator, with the first label representing
         * the local part of the email address.
         */
        rname: string;
        /**
         * The time to live (TTL) of the SOA record itself.
         */
        ttl: number;
    }
}
export interface SettingEditResponse {
    zone_defaults?: SettingEditResponse.ZoneDefaults;
}
export declare namespace SettingEditResponse {
    interface ZoneDefaults {
        /**
         * Whether to flatten all CNAME records in the zone. Note that, due to DNS
         * limitations, a CNAME record at the zone apex will always be flattened.
         */
        flatten_all_cnames?: boolean;
        /**
         * Whether to enable Foundation DNS Advanced Nameservers on the zone.
         */
        foundation_dns?: boolean;
        /**
         * Whether to enable multi-provider DNS, which causes Cloudflare to activate the
         * zone even when non-Cloudflare NS records exist, and to respect NS records at the
         * zone apex during outbound zone transfers.
         */
        multi_provider?: boolean;
        /**
         * Settings determining the nameservers through which the zone should be available.
         */
        nameservers?: ZoneDefaults.Nameservers;
        /**
         * The time to live (TTL) of the zone's nameserver (NS) records.
         */
        ns_ttl?: number;
        /**
         * Allows a Secondary DNS zone to use (proxied) override records and CNAME
         * flattening at the zone apex.
         */
        secondary_overrides?: boolean;
        /**
         * Components of the zone's SOA record.
         */
        soa?: ZoneDefaults.SOA;
        /**
         * Whether the zone mode is a regular or CDN/DNS only zone.
         */
        zone_mode?: 'standard' | 'cdn_only' | 'dns_only';
    }
    namespace ZoneDefaults {
        /**
         * Settings determining the nameservers through which the zone should be available.
         */
        interface Nameservers {
            /**
             * Nameserver type
             */
            type: 'cloudflare.standard' | 'cloudflare.standard.random' | 'custom.account' | 'custom.tenant';
        }
        /**
         * Components of the zone's SOA record.
         */
        interface SOA {
            /**
             * Time in seconds of being unable to query the primary server after which
             * secondary servers should stop serving the zone.
             */
            expire: number;
            /**
             * The time to live (TTL) for negative caching of records within the zone.
             */
            min_ttl: number;
            /**
             * The primary nameserver, which may be used for outbound zone transfers.
             */
            mname: string;
            /**
             * Time in seconds after which secondary servers should re-check the SOA record to
             * see if the zone has been updated.
             */
            refresh: number;
            /**
             * Time in seconds after which secondary servers should retry queries after the
             * primary server was unresponsive.
             */
            retry: number;
            /**
             * The email address of the zone administrator, with the first label representing
             * the local part of the email address.
             */
            rname: string;
            /**
             * The time to live (TTL) of the SOA record itself.
             */
            ttl: number;
        }
    }
}
export interface SettingGetResponse {
    zone_defaults?: SettingGetResponse.ZoneDefaults;
}
export declare namespace SettingGetResponse {
    interface ZoneDefaults {
        /**
         * Whether to flatten all CNAME records in the zone. Note that, due to DNS
         * limitations, a CNAME record at the zone apex will always be flattened.
         */
        flatten_all_cnames?: boolean;
        /**
         * Whether to enable Foundation DNS Advanced Nameservers on the zone.
         */
        foundation_dns?: boolean;
        /**
         * Whether to enable multi-provider DNS, which causes Cloudflare to activate the
         * zone even when non-Cloudflare NS records exist, and to respect NS records at the
         * zone apex during outbound zone transfers.
         */
        multi_provider?: boolean;
        /**
         * Settings determining the nameservers through which the zone should be available.
         */
        nameservers?: ZoneDefaults.Nameservers;
        /**
         * The time to live (TTL) of the zone's nameserver (NS) records.
         */
        ns_ttl?: number;
        /**
         * Allows a Secondary DNS zone to use (proxied) override records and CNAME
         * flattening at the zone apex.
         */
        secondary_overrides?: boolean;
        /**
         * Components of the zone's SOA record.
         */
        soa?: ZoneDefaults.SOA;
        /**
         * Whether the zone mode is a regular or CDN/DNS only zone.
         */
        zone_mode?: 'standard' | 'cdn_only' | 'dns_only';
    }
    namespace ZoneDefaults {
        /**
         * Settings determining the nameservers through which the zone should be available.
         */
        interface Nameservers {
            /**
             * Nameserver type
             */
            type: 'cloudflare.standard' | 'cloudflare.standard.random' | 'custom.account' | 'custom.tenant';
        }
        /**
         * Components of the zone's SOA record.
         */
        interface SOA {
            /**
             * Time in seconds of being unable to query the primary server after which
             * secondary servers should stop serving the zone.
             */
            expire: number;
            /**
             * The time to live (TTL) for negative caching of records within the zone.
             */
            min_ttl: number;
            /**
             * The primary nameserver, which may be used for outbound zone transfers.
             */
            mname: string;
            /**
             * Time in seconds after which secondary servers should re-check the SOA record to
             * see if the zone has been updated.
             */
            refresh: number;
            /**
             * Time in seconds after which secondary servers should retry queries after the
             * primary server was unresponsive.
             */
            retry: number;
            /**
             * The email address of the zone administrator, with the first label representing
             * the local part of the email address.
             */
            rname: string;
            /**
             * The time to live (TTL) of the SOA record itself.
             */
            ttl: number;
        }
    }
}
export interface SettingEditParams {
    /**
     * Path param: The Account ID to use for this endpoint. Mutually exclusive with the
     * Zone ID.
     */
    account_id?: string;
    /**
     * Path param: The Zone ID to use for this endpoint. Mutually exclusive with the
     * Account ID.
     */
    zone_id?: string;
    /**
     * Body param:
     */
    zone_defaults?: SettingEditParams.ZoneDefaults;
}
export declare namespace SettingEditParams {
    interface ZoneDefaults {
        /**
         * Whether to flatten all CNAME records in the zone. Note that, due to DNS
         * limitations, a CNAME record at the zone apex will always be flattened.
         */
        flatten_all_cnames?: boolean;
        /**
         * Whether to enable Foundation DNS Advanced Nameservers on the zone.
         */
        foundation_dns?: boolean;
        /**
         * Whether to enable multi-provider DNS, which causes Cloudflare to activate the
         * zone even when non-Cloudflare NS records exist, and to respect NS records at the
         * zone apex during outbound zone transfers.
         */
        multi_provider?: boolean;
        /**
         * Settings determining the nameservers through which the zone should be available.
         */
        nameservers?: ZoneDefaults.Nameservers;
        /**
         * The time to live (TTL) of the zone's nameserver (NS) records.
         */
        ns_ttl?: number;
        /**
         * Allows a Secondary DNS zone to use (proxied) override records and CNAME
         * flattening at the zone apex.
         */
        secondary_overrides?: boolean;
        /**
         * Components of the zone's SOA record.
         */
        soa?: ZoneDefaults.SOA;
        /**
         * Whether the zone mode is a regular or CDN/DNS only zone.
         */
        zone_mode?: 'standard' | 'cdn_only' | 'dns_only';
    }
    namespace ZoneDefaults {
        /**
         * Settings determining the nameservers through which the zone should be available.
         */
        interface Nameservers {
            /**
             * Nameserver type
             */
            type: 'cloudflare.standard' | 'cloudflare.standard.random' | 'custom.account' | 'custom.tenant';
        }
        /**
         * Components of the zone's SOA record.
         */
        interface SOA {
            /**
             * Time in seconds of being unable to query the primary server after which
             * secondary servers should stop serving the zone.
             */
            expire: number;
            /**
             * The time to live (TTL) for negative caching of records within the zone.
             */
            min_ttl: number;
            /**
             * The primary nameserver, which may be used for outbound zone transfers.
             */
            mname: string;
            /**
             * Time in seconds after which secondary servers should re-check the SOA record to
             * see if the zone has been updated.
             */
            refresh: number;
            /**
             * Time in seconds after which secondary servers should retry queries after the
             * primary server was unresponsive.
             */
            retry: number;
            /**
             * The email address of the zone administrator, with the first label representing
             * the local part of the email address.
             */
            rname: string;
            /**
             * The time to live (TTL) of the SOA record itself.
             */
            ttl: number;
        }
    }
}
export interface SettingGetParams {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    account_id?: string;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zone_id?: string;
}
export declare namespace Settings {
    export { type DNSSetting as DNSSetting, type SettingEditResponse as SettingEditResponse, type SettingGetResponse as SettingGetResponse, type SettingEditParams as SettingEditParams, type SettingGetParams as SettingGetParams, };
    export { Views as Views, type ViewCreateResponse as ViewCreateResponse, type ViewListResponse as ViewListResponse, type ViewDeleteResponse as ViewDeleteResponse, type ViewEditResponse as ViewEditResponse, type ViewGetResponse as ViewGetResponse, ViewListResponsesV4PagePaginationArray as ViewListResponsesV4PagePaginationArray, type ViewCreateParams as ViewCreateParams, type ViewListParams as ViewListParams, type ViewDeleteParams as ViewDeleteParams, type ViewEditParams as ViewEditParams, type ViewGetParams as ViewGetParams, };
}
//# sourceMappingURL=settings.d.ts.map