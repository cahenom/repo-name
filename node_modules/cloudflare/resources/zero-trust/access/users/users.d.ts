import { APIResource } from "../../../../resource.js";
import * as Core from "../../../../core.js";
import * as ActiveSessionsAPI from "./active-sessions.js";
import { ActiveSessionGetParams, ActiveSessionGetResponse, ActiveSessionListParams, ActiveSessionListResponse, ActiveSessionListResponsesSinglePage, ActiveSessions } from "./active-sessions.js";
import * as FailedLoginsAPI from "./failed-logins.js";
import { FailedLoginListParams, FailedLoginListResponse, FailedLoginListResponsesSinglePage, FailedLogins } from "./failed-logins.js";
import * as LastSeenIdentityAPI from "./last-seen-identity.js";
import { Identity, LastSeenIdentity, LastSeenIdentityGetParams } from "./last-seen-identity.js";
import { SinglePage } from "../../../../pagination.js";
export declare class Users extends APIResource {
    activeSessions: ActiveSessionsAPI.ActiveSessions;
    lastSeenIdentity: LastSeenIdentityAPI.LastSeenIdentity;
    failedLogins: FailedLoginsAPI.FailedLogins;
    /**
     * Gets a list of users for an account.
     */
    list(params: UserListParams, options?: Core.RequestOptions): Core.PagePromise<AccessUsersSinglePage, AccessUser>;
}
export declare class AccessUsersSinglePage extends SinglePage<AccessUser> {
}
export interface AccessUser {
    /**
     * UUID
     */
    id?: string;
    /**
     * True if the user has authenticated with Cloudflare Access.
     */
    access_seat?: boolean;
    /**
     * The number of active devices registered to the user.
     */
    active_device_count?: number;
    created_at?: string;
    /**
     * The email of the user.
     */
    email?: string;
    /**
     * True if the user has logged into the WARP client.
     */
    gateway_seat?: boolean;
    /**
     * The time at which the user last successfully logged in.
     */
    last_successful_login?: string;
    /**
     * The name of the user.
     */
    name?: string;
    /**
     * The unique API identifier for the Zero Trust seat.
     */
    seat_uid?: string;
    /**
     * The unique API identifier for the user.
     */
    uid?: string;
    updated_at?: string;
}
export interface UserListParams {
    /**
     * Path param: Identifier
     */
    account_id: string;
    /**
     * Query param: The email of the user.
     */
    email?: string;
    /**
     * Query param: The name of the user.
     */
    name?: string;
    /**
     * Query param: Search for users by other listed query parameters.
     */
    search?: string;
}
export declare namespace Users {
    export { type AccessUser as AccessUser, AccessUsersSinglePage as AccessUsersSinglePage, type UserListParams as UserListParams, };
    export { ActiveSessions as ActiveSessions, type ActiveSessionListResponse as ActiveSessionListResponse, type ActiveSessionGetResponse as ActiveSessionGetResponse, ActiveSessionListResponsesSinglePage as ActiveSessionListResponsesSinglePage, type ActiveSessionListParams as ActiveSessionListParams, type ActiveSessionGetParams as ActiveSessionGetParams, };
    export { LastSeenIdentity as LastSeenIdentity, type Identity as Identity, type LastSeenIdentityGetParams as LastSeenIdentityGetParams, };
    export { FailedLogins as FailedLogins, type FailedLoginListResponse as FailedLoginListResponse, FailedLoginListResponsesSinglePage as FailedLoginListResponsesSinglePage, type FailedLoginListParams as FailedLoginListParams, };
}
//# sourceMappingURL=users.d.ts.map