import { APIResource } from "../../../resource.js";
import * as BookmarksAPI from "./bookmarks.js";
import { Bookmark, BookmarkCreateParams, BookmarkDeleteParams, BookmarkDeleteResponse, BookmarkGetParams, BookmarkListParams, BookmarkUpdateParams, Bookmarks, BookmarksSinglePage } from "./bookmarks.js";
import * as CustomPagesAPI from "./custom-pages.js";
import { CustomPage, CustomPageCreateParams, CustomPageDeleteParams, CustomPageDeleteResponse, CustomPageGetParams, CustomPageListParams, CustomPageUpdateParams, CustomPageWithoutHTML, CustomPageWithoutHTMLsSinglePage, CustomPages } from "./custom-pages.js";
import * as GatewayCAAPI from "./gateway-ca.js";
import { GatewayCA, GatewayCACreateParams, GatewayCACreateResponse, GatewayCADeleteParams, GatewayCADeleteResponse, GatewayCAListParams, GatewayCAListResponse, GatewayCAListResponsesSinglePage } from "./gateway-ca.js";
import * as GroupsAPI from "./groups.js";
import { GroupCreateParams, GroupDeleteParams, GroupDeleteResponse, GroupGetParams, GroupListParams, GroupUpdateParams, Groups, ZeroTrustGroup, ZeroTrustGroupsSinglePage } from "./groups.js";
import * as KeysAPI from "./keys.js";
import { KeyGetParams, KeyGetResponse, KeyRotateParams, KeyRotateResponse, KeyUpdateParams, KeyUpdateResponse, Keys } from "./keys.js";
import * as PoliciesAPI from "./policies.js";
import { ApprovalGroup, Policies, Policy, PolicyCreateParams, PolicyCreateResponse, PolicyDeleteParams, PolicyDeleteResponse, PolicyGetParams, PolicyGetResponse, PolicyListParams, PolicyListResponse, PolicyListResponsesSinglePage, PolicyUpdateParams, PolicyUpdateResponse } from "./policies.js";
import * as ServiceTokensAPI from "./service-tokens.js";
import { ServiceToken as ServiceTokensAPIServiceToken, ServiceTokenCreateParams, ServiceTokenCreateResponse, ServiceTokenDeleteParams, ServiceTokenGetParams, ServiceTokenListParams, ServiceTokenRefreshParams, ServiceTokenRotateParams, ServiceTokenRotateResponse, ServiceTokenUpdateParams, ServiceTokens, ServiceTokensSinglePage } from "./service-tokens.js";
import * as TagsAPI from "./tags.js";
import { Tag, TagCreateParams, TagDeleteParams, TagDeleteResponse, TagGetParams, TagListParams, TagUpdateParams, Tags, TagsSinglePage } from "./tags.js";
import * as ApplicationsAPI from "./applications/applications.js";
import { AllowedHeaders, AllowedIdPs, AllowedMethods, AllowedOrigins, AppID, Application, ApplicationCreateParams, ApplicationCreateResponse, ApplicationDeleteParams, ApplicationDeleteResponse, ApplicationGetParams, ApplicationGetResponse, ApplicationListParams, ApplicationListResponse, ApplicationListResponsesSinglePage, ApplicationPolicy, ApplicationRevokeTokensParams, ApplicationRevokeTokensResponse, ApplicationSCIMConfig, ApplicationType, ApplicationUpdateParams, ApplicationUpdateResponse, Applications, CORSHeaders, Decision, OIDCSaaSApp, SAMLSaaSApp, SCIMConfigAuthenticationHTTPBasic, SCIMConfigAuthenticationOAuthBearerToken, SCIMConfigAuthenticationOauth2, SCIMConfigMapping, SaaSAppNameIDFormat, SelfHostedDomains } from "./applications/applications.js";
import * as CertificatesAPI from "./certificates/certificates.js";
import { AssociatedHostnames, Certificate as CertificatesAPICertificate, CertificateCreateParams, CertificateDeleteParams, CertificateDeleteResponse, CertificateGetParams, CertificateListParams, CertificateUpdateParams, Certificates, CertificatesSinglePage } from "./certificates/certificates.js";
import * as InfrastructureAPI from "./infrastructure/infrastructure.js";
import { Infrastructure } from "./infrastructure/infrastructure.js";
import * as LogsAPI from "./logs/logs.js";
import { Logs } from "./logs/logs.js";
import * as UsersAPI from "./users/users.js";
import { AccessUser, AccessUsersSinglePage, UserListParams, Users } from "./users/users.js";
export declare class Access extends APIResource {
    gatewayCA: GatewayCAAPI.GatewayCA;
    infrastructure: InfrastructureAPI.Infrastructure;
    applications: ApplicationsAPI.Applications;
    certificates: CertificatesAPI.Certificates;
    groups: GroupsAPI.Groups;
    serviceTokens: ServiceTokensAPI.ServiceTokens;
    bookmarks: BookmarksAPI.Bookmarks;
    keys: KeysAPI.Keys;
    logs: LogsAPI.Logs;
    users: UsersAPI.Users;
    customPages: CustomPagesAPI.CustomPages;
    tags: TagsAPI.Tags;
    policies: PoliciesAPI.Policies;
}
/**
 * Enforces a device posture rule has run successfully
 */
export interface AccessDevicePostureRule {
    device_posture: AccessDevicePostureRule.DevicePosture;
}
export declare namespace AccessDevicePostureRule {
    interface DevicePosture {
        /**
         * The ID of a device posture integration.
         */
        integration_uid: string;
    }
}
/**
 * Enforces a device posture rule has run successfully
 */
export interface AccessDevicePostureRuleParam {
    device_posture: AccessDevicePostureRuleParam.DevicePosture;
}
export declare namespace AccessDevicePostureRuleParam {
    interface DevicePosture {
        /**
         * The ID of a device posture integration.
         */
        integration_uid: string;
    }
}
/**
 * Matches an Access group.
 */
export type AccessRule = GroupRule | AnyValidServiceTokenRule | AccessRule.AccessAuthContextRule | AuthenticationMethodRule | AzureGroupRule | CertificateRule | AccessRule.AccessCommonNameRule | CountryRule | AccessDevicePostureRule | DomainRule | EmailListRule | EmailRule | EveryoneRule | ExternalEvaluationRule | GitHubOrganizationRule | GSuiteGroupRule | IPListRule | IPRule | OktaGroupRule | SAMLGroupRule | ServiceTokenRule;
export declare namespace AccessRule {
    /**
     * Matches an Azure Authentication Context. Requires an Azure identity provider.
     */
    interface AccessAuthContextRule {
        auth_context: AccessAuthContextRule.AuthContext;
    }
    namespace AccessAuthContextRule {
        interface AuthContext {
            /**
             * The ID of an Authentication context.
             */
            id: string;
            /**
             * The ACID of an Authentication context.
             */
            ac_id: string;
            /**
             * The ID of your Azure identity provider.
             */
            identity_provider_id: string;
        }
    }
    /**
     * Matches a specific common name.
     */
    interface AccessCommonNameRule {
        common_name: AccessCommonNameRule.CommonName;
    }
    namespace AccessCommonNameRule {
        interface CommonName {
            /**
             * The common name to match.
             */
            common_name: string;
        }
    }
}
/**
 * Matches an Access group.
 */
export type AccessRuleParam = GroupRuleParam | AnyValidServiceTokenRuleParam | AccessRuleParam.AccessAuthContextRule | AuthenticationMethodRuleParam | AzureGroupRuleParam | CertificateRuleParam | AccessRuleParam.AccessCommonNameRule | CountryRuleParam | AccessDevicePostureRuleParam | DomainRuleParam | EmailListRuleParam | EmailRuleParam | EveryoneRuleParam | ExternalEvaluationRuleParam | GitHubOrganizationRuleParam | GSuiteGroupRuleParam | IPListRuleParam | IPRuleParam | OktaGroupRuleParam | SAMLGroupRuleParam | ServiceTokenRuleParam;
export declare namespace AccessRuleParam {
    /**
     * Matches an Azure Authentication Context. Requires an Azure identity provider.
     */
    interface AccessAuthContextRule {
        auth_context: AccessAuthContextRule.AuthContext;
    }
    namespace AccessAuthContextRule {
        interface AuthContext {
            /**
             * The ID of an Authentication context.
             */
            id: string;
            /**
             * The ACID of an Authentication context.
             */
            ac_id: string;
            /**
             * The ID of your Azure identity provider.
             */
            identity_provider_id: string;
        }
    }
    /**
     * Matches a specific common name.
     */
    interface AccessCommonNameRule {
        common_name: AccessCommonNameRule.CommonName;
    }
    namespace AccessCommonNameRule {
        interface CommonName {
            /**
             * The common name to match.
             */
            common_name: string;
        }
    }
}
/**
 * Matches any valid Access Service Token
 */
export interface AnyValidServiceTokenRule {
    /**
     * An empty object which matches on all service tokens.
     */
    any_valid_service_token: AnyValidServiceTokenRule.AnyValidServiceToken;
}
export declare namespace AnyValidServiceTokenRule {
    /**
     * An empty object which matches on all service tokens.
     */
    interface AnyValidServiceToken {
    }
}
/**
 * Matches any valid Access Service Token
 */
export interface AnyValidServiceTokenRuleParam {
    /**
     * An empty object which matches on all service tokens.
     */
    any_valid_service_token: AnyValidServiceTokenRuleParam.AnyValidServiceToken;
}
export declare namespace AnyValidServiceTokenRuleParam {
    /**
     * An empty object which matches on all service tokens.
     */
    interface AnyValidServiceToken {
    }
}
/**
 * Enforce different MFA options
 */
export interface AuthenticationMethodRule {
    auth_method: AuthenticationMethodRule.AuthMethod;
}
export declare namespace AuthenticationMethodRule {
    interface AuthMethod {
        /**
         * The type of authentication method
         * https://datatracker.ietf.org/doc/html/rfc8176#section-2.
         */
        auth_method: string;
    }
}
/**
 * Enforce different MFA options
 */
export interface AuthenticationMethodRuleParam {
    auth_method: AuthenticationMethodRuleParam.AuthMethod;
}
export declare namespace AuthenticationMethodRuleParam {
    interface AuthMethod {
        /**
         * The type of authentication method
         * https://datatracker.ietf.org/doc/html/rfc8176#section-2.
         */
        auth_method: string;
    }
}
/**
 * Matches an Azure group. Requires an Azure identity provider.
 */
export interface AzureGroupRule {
    azureAD: AzureGroupRule.AzureAD;
}
export declare namespace AzureGroupRule {
    interface AzureAD {
        /**
         * The ID of an Azure group.
         */
        id: string;
        /**
         * The ID of your Azure identity provider.
         */
        identity_provider_id: string;
    }
}
/**
 * Matches an Azure group. Requires an Azure identity provider.
 */
export interface AzureGroupRuleParam {
    azureAD: AzureGroupRuleParam.AzureAD;
}
export declare namespace AzureGroupRuleParam {
    interface AzureAD {
        /**
         * The ID of an Azure group.
         */
        id: string;
        /**
         * The ID of your Azure identity provider.
         */
        identity_provider_id: string;
    }
}
/**
 * Matches any valid client certificate.
 */
export interface CertificateRule {
    certificate: CertificateRule.Certificate;
}
export declare namespace CertificateRule {
    interface Certificate {
    }
}
/**
 * Matches any valid client certificate.
 */
export interface CertificateRuleParam {
    certificate: CertificateRuleParam.Certificate;
}
export declare namespace CertificateRuleParam {
    interface Certificate {
    }
}
/**
 * Matches a specific country
 */
export interface CountryRule {
    geo: CountryRule.Geo;
}
export declare namespace CountryRule {
    interface Geo {
        /**
         * The country code that should be matched.
         */
        country_code: string;
    }
}
/**
 * Matches a specific country
 */
export interface CountryRuleParam {
    geo: CountryRuleParam.Geo;
}
export declare namespace CountryRuleParam {
    interface Geo {
        /**
         * The country code that should be matched.
         */
        country_code: string;
    }
}
/**
 * Match an entire email domain.
 */
export interface DomainRule {
    email_domain: DomainRule.EmailDomain;
}
export declare namespace DomainRule {
    interface EmailDomain {
        /**
         * The email domain to match.
         */
        domain: string;
    }
}
/**
 * Match an entire email domain.
 */
export interface DomainRuleParam {
    email_domain: DomainRuleParam.EmailDomain;
}
export declare namespace DomainRuleParam {
    interface EmailDomain {
        /**
         * The email domain to match.
         */
        domain: string;
    }
}
/**
 * Matches an email address from a list.
 */
export interface EmailListRule {
    email_list: EmailListRule.EmailList;
}
export declare namespace EmailListRule {
    interface EmailList {
        /**
         * The ID of a previously created email list.
         */
        id: string;
    }
}
/**
 * Matches an email address from a list.
 */
export interface EmailListRuleParam {
    email_list: EmailListRuleParam.EmailList;
}
export declare namespace EmailListRuleParam {
    interface EmailList {
        /**
         * The ID of a previously created email list.
         */
        id: string;
    }
}
/**
 * Matches a specific email.
 */
export interface EmailRule {
    email: EmailRule.Email;
}
export declare namespace EmailRule {
    interface Email {
        /**
         * The email of the user.
         */
        email: string;
    }
}
/**
 * Matches a specific email.
 */
export interface EmailRuleParam {
    email: EmailRuleParam.Email;
}
export declare namespace EmailRuleParam {
    interface Email {
        /**
         * The email of the user.
         */
        email: string;
    }
}
/**
 * Matches everyone.
 */
export interface EveryoneRule {
    /**
     * An empty object which matches on all users.
     */
    everyone: EveryoneRule.Everyone;
}
export declare namespace EveryoneRule {
    /**
     * An empty object which matches on all users.
     */
    interface Everyone {
    }
}
/**
 * Matches everyone.
 */
export interface EveryoneRuleParam {
    /**
     * An empty object which matches on all users.
     */
    everyone: EveryoneRuleParam.Everyone;
}
export declare namespace EveryoneRuleParam {
    /**
     * An empty object which matches on all users.
     */
    interface Everyone {
    }
}
/**
 * Create Allow or Block policies which evaluate the user based on custom criteria.
 */
export interface ExternalEvaluationRule {
    external_evaluation: ExternalEvaluationRule.ExternalEvaluation;
}
export declare namespace ExternalEvaluationRule {
    interface ExternalEvaluation {
        /**
         * The API endpoint containing your business logic.
         */
        evaluate_url: string;
        /**
         * The API endpoint containing the key that Access uses to verify that the response
         * came from your API.
         */
        keys_url: string;
    }
}
/**
 * Create Allow or Block policies which evaluate the user based on custom criteria.
 */
export interface ExternalEvaluationRuleParam {
    external_evaluation: ExternalEvaluationRuleParam.ExternalEvaluation;
}
export declare namespace ExternalEvaluationRuleParam {
    interface ExternalEvaluation {
        /**
         * The API endpoint containing your business logic.
         */
        evaluate_url: string;
        /**
         * The API endpoint containing the key that Access uses to verify that the response
         * came from your API.
         */
        keys_url: string;
    }
}
/**
 * Matches a Github organization. Requires a Github identity provider.
 */
export interface GitHubOrganizationRule {
    'github-organization': GitHubOrganizationRule.GitHubOrganization;
}
export declare namespace GitHubOrganizationRule {
    interface GitHubOrganization {
        /**
         * The ID of your Github identity provider.
         */
        identity_provider_id: string;
        /**
         * The name of the organization.
         */
        name: string;
        /**
         * The name of the team
         */
        team?: string;
    }
}
/**
 * Matches a Github organization. Requires a Github identity provider.
 */
export interface GitHubOrganizationRuleParam {
    'github-organization': GitHubOrganizationRuleParam.GitHubOrganization;
}
export declare namespace GitHubOrganizationRuleParam {
    interface GitHubOrganization {
        /**
         * The ID of your Github identity provider.
         */
        identity_provider_id: string;
        /**
         * The name of the organization.
         */
        name: string;
        /**
         * The name of the team
         */
        team?: string;
    }
}
/**
 * Matches an Access group.
 */
export interface GroupRule {
    group: GroupRule.Group;
}
export declare namespace GroupRule {
    interface Group {
        /**
         * The ID of a previously created Access group.
         */
        id: string;
    }
}
/**
 * Matches an Access group.
 */
export interface GroupRuleParam {
    group: GroupRuleParam.Group;
}
export declare namespace GroupRuleParam {
    interface Group {
        /**
         * The ID of a previously created Access group.
         */
        id: string;
    }
}
/**
 * Matches a group in Google Workspace. Requires a Google Workspace identity
 * provider.
 */
export interface GSuiteGroupRule {
    gsuite: GSuiteGroupRule.GSuite;
}
export declare namespace GSuiteGroupRule {
    interface GSuite {
        /**
         * The email of the Google Workspace group.
         */
        email: string;
        /**
         * The ID of your Google Workspace identity provider.
         */
        identity_provider_id: string;
    }
}
/**
 * Matches a group in Google Workspace. Requires a Google Workspace identity
 * provider.
 */
export interface GSuiteGroupRuleParam {
    gsuite: GSuiteGroupRuleParam.GSuite;
}
export declare namespace GSuiteGroupRuleParam {
    interface GSuite {
        /**
         * The email of the Google Workspace group.
         */
        email: string;
        /**
         * The ID of your Google Workspace identity provider.
         */
        identity_provider_id: string;
    }
}
/**
 * Matches an IP address from a list.
 */
export interface IPListRule {
    ip_list: IPListRule.IPList;
}
export declare namespace IPListRule {
    interface IPList {
        /**
         * The ID of a previously created IP list.
         */
        id: string;
    }
}
/**
 * Matches an IP address from a list.
 */
export interface IPListRuleParam {
    ip_list: IPListRuleParam.IPList;
}
export declare namespace IPListRuleParam {
    interface IPList {
        /**
         * The ID of a previously created IP list.
         */
        id: string;
    }
}
/**
 * Matches an IP address block.
 */
export interface IPRule {
    ip: IPRule.IP;
}
export declare namespace IPRule {
    interface IP {
        /**
         * An IPv4 or IPv6 CIDR block.
         */
        ip: string;
    }
}
/**
 * Matches an IP address block.
 */
export interface IPRuleParam {
    ip: IPRuleParam.IP;
}
export declare namespace IPRuleParam {
    interface IP {
        /**
         * An IPv4 or IPv6 CIDR block.
         */
        ip: string;
    }
}
/**
 * Matches an Okta group. Requires an Okta identity provider.
 */
export interface OktaGroupRule {
    okta: OktaGroupRule.Okta;
}
export declare namespace OktaGroupRule {
    interface Okta {
        /**
         * The ID of your Okta identity provider.
         */
        identity_provider_id: string;
        /**
         * The name of the Okta group.
         */
        name: string;
    }
}
/**
 * Matches an Okta group. Requires an Okta identity provider.
 */
export interface OktaGroupRuleParam {
    okta: OktaGroupRuleParam.Okta;
}
export declare namespace OktaGroupRuleParam {
    interface Okta {
        /**
         * The ID of your Okta identity provider.
         */
        identity_provider_id: string;
        /**
         * The name of the Okta group.
         */
        name: string;
    }
}
/**
 * Matches a SAML group. Requires a SAML identity provider.
 */
export interface SAMLGroupRule {
    saml: SAMLGroupRule.SAML;
}
export declare namespace SAMLGroupRule {
    interface SAML {
        /**
         * The name of the SAML attribute.
         */
        attribute_name: string;
        /**
         * The SAML attribute value to look for.
         */
        attribute_value: string;
        /**
         * The ID of your SAML identity provider.
         */
        identity_provider_id: string;
    }
}
/**
 * Matches a SAML group. Requires a SAML identity provider.
 */
export interface SAMLGroupRuleParam {
    saml: SAMLGroupRuleParam.SAML;
}
export declare namespace SAMLGroupRuleParam {
    interface SAML {
        /**
         * The name of the SAML attribute.
         */
        attribute_name: string;
        /**
         * The SAML attribute value to look for.
         */
        attribute_value: string;
        /**
         * The ID of your SAML identity provider.
         */
        identity_provider_id: string;
    }
}
/**
 * Matches a specific Access Service Token
 */
export interface ServiceTokenRule {
    service_token: ServiceTokenRule.ServiceToken;
}
export declare namespace ServiceTokenRule {
    interface ServiceToken {
        /**
         * The ID of a Service Token.
         */
        token_id: string;
    }
}
/**
 * Matches a specific Access Service Token
 */
export interface ServiceTokenRuleParam {
    service_token: ServiceTokenRuleParam.ServiceToken;
}
export declare namespace ServiceTokenRuleParam {
    interface ServiceToken {
        /**
         * The ID of a Service Token.
         */
        token_id: string;
    }
}
export declare namespace Access {
    export { type AccessDevicePostureRule as AccessDevicePostureRule, type AccessRule as AccessRule, type AnyValidServiceTokenRule as AnyValidServiceTokenRule, type AuthenticationMethodRule as AuthenticationMethodRule, type AzureGroupRule as AzureGroupRule, type CertificateRule as CertificateRule, type CountryRule as CountryRule, type DomainRule as DomainRule, type EmailListRule as EmailListRule, type EmailRule as EmailRule, type EveryoneRule as EveryoneRule, type ExternalEvaluationRule as ExternalEvaluationRule, type GitHubOrganizationRule as GitHubOrganizationRule, type GroupRule as GroupRule, type GSuiteGroupRule as GSuiteGroupRule, type IPListRule as IPListRule, type IPRule as IPRule, type OktaGroupRule as OktaGroupRule, type SAMLGroupRule as SAMLGroupRule, type ServiceTokenRule as ServiceTokenRule, };
    export { GatewayCA as GatewayCA, type GatewayCACreateResponse as GatewayCACreateResponse, type GatewayCAListResponse as GatewayCAListResponse, type GatewayCADeleteResponse as GatewayCADeleteResponse, GatewayCAListResponsesSinglePage as GatewayCAListResponsesSinglePage, type GatewayCACreateParams as GatewayCACreateParams, type GatewayCAListParams as GatewayCAListParams, type GatewayCADeleteParams as GatewayCADeleteParams, };
    export { Infrastructure as Infrastructure };
    export { Applications as Applications, type AllowedHeaders as AllowedHeaders, type AllowedIdPs as AllowedIdPs, type AllowedMethods as AllowedMethods, type AllowedOrigins as AllowedOrigins, type AppID as AppID, type Application as Application, type ApplicationPolicy as ApplicationPolicy, type ApplicationSCIMConfig as ApplicationSCIMConfig, type ApplicationType as ApplicationType, type CORSHeaders as CORSHeaders, type Decision as Decision, type OIDCSaaSApp as OIDCSaaSApp, type SaaSAppNameIDFormat as SaaSAppNameIDFormat, type SAMLSaaSApp as SAMLSaaSApp, type SCIMConfigAuthenticationHTTPBasic as SCIMConfigAuthenticationHTTPBasic, type SCIMConfigAuthenticationOAuthBearerToken as SCIMConfigAuthenticationOAuthBearerToken, type SCIMConfigAuthenticationOauth2 as SCIMConfigAuthenticationOauth2, type SCIMConfigMapping as SCIMConfigMapping, type SelfHostedDomains as SelfHostedDomains, type ApplicationCreateResponse as ApplicationCreateResponse, type ApplicationUpdateResponse as ApplicationUpdateResponse, type ApplicationListResponse as ApplicationListResponse, type ApplicationDeleteResponse as ApplicationDeleteResponse, type ApplicationGetResponse as ApplicationGetResponse, type ApplicationRevokeTokensResponse as ApplicationRevokeTokensResponse, ApplicationListResponsesSinglePage as ApplicationListResponsesSinglePage, type ApplicationCreateParams as ApplicationCreateParams, type ApplicationUpdateParams as ApplicationUpdateParams, type ApplicationListParams as ApplicationListParams, type ApplicationDeleteParams as ApplicationDeleteParams, type ApplicationGetParams as ApplicationGetParams, type ApplicationRevokeTokensParams as ApplicationRevokeTokensParams, };
    export { Certificates as Certificates, type AssociatedHostnames as AssociatedHostnames, type CertificatesAPICertificate as Certificate, type CertificateDeleteResponse as CertificateDeleteResponse, CertificatesSinglePage as CertificatesSinglePage, type CertificateCreateParams as CertificateCreateParams, type CertificateUpdateParams as CertificateUpdateParams, type CertificateListParams as CertificateListParams, type CertificateDeleteParams as CertificateDeleteParams, type CertificateGetParams as CertificateGetParams, };
    export { Groups as Groups, type ZeroTrustGroup as ZeroTrustGroup, type GroupDeleteResponse as GroupDeleteResponse, ZeroTrustGroupsSinglePage as ZeroTrustGroupsSinglePage, type GroupCreateParams as GroupCreateParams, type GroupUpdateParams as GroupUpdateParams, type GroupListParams as GroupListParams, type GroupDeleteParams as GroupDeleteParams, type GroupGetParams as GroupGetParams, };
    export { ServiceTokens as ServiceTokens, type ServiceTokensAPIServiceToken as ServiceToken, type ServiceTokenCreateResponse as ServiceTokenCreateResponse, type ServiceTokenRotateResponse as ServiceTokenRotateResponse, ServiceTokensSinglePage as ServiceTokensSinglePage, type ServiceTokenCreateParams as ServiceTokenCreateParams, type ServiceTokenUpdateParams as ServiceTokenUpdateParams, type ServiceTokenListParams as ServiceTokenListParams, type ServiceTokenDeleteParams as ServiceTokenDeleteParams, type ServiceTokenGetParams as ServiceTokenGetParams, type ServiceTokenRefreshParams as ServiceTokenRefreshParams, type ServiceTokenRotateParams as ServiceTokenRotateParams, };
    export { Bookmarks as Bookmarks, type Bookmark as Bookmark, type BookmarkDeleteResponse as BookmarkDeleteResponse, BookmarksSinglePage as BookmarksSinglePage, type BookmarkCreateParams as BookmarkCreateParams, type BookmarkUpdateParams as BookmarkUpdateParams, type BookmarkListParams as BookmarkListParams, type BookmarkDeleteParams as BookmarkDeleteParams, type BookmarkGetParams as BookmarkGetParams, };
    export { Keys as Keys, type KeyUpdateResponse as KeyUpdateResponse, type KeyGetResponse as KeyGetResponse, type KeyRotateResponse as KeyRotateResponse, type KeyUpdateParams as KeyUpdateParams, type KeyGetParams as KeyGetParams, type KeyRotateParams as KeyRotateParams, };
    export { Logs as Logs };
    export { Users as Users, type AccessUser as AccessUser, AccessUsersSinglePage as AccessUsersSinglePage, type UserListParams as UserListParams, };
    export { CustomPages as CustomPages, type CustomPage as CustomPage, type CustomPageWithoutHTML as CustomPageWithoutHTML, type CustomPageDeleteResponse as CustomPageDeleteResponse, CustomPageWithoutHTMLsSinglePage as CustomPageWithoutHTMLsSinglePage, type CustomPageCreateParams as CustomPageCreateParams, type CustomPageUpdateParams as CustomPageUpdateParams, type CustomPageListParams as CustomPageListParams, type CustomPageDeleteParams as CustomPageDeleteParams, type CustomPageGetParams as CustomPageGetParams, };
    export { Tags as Tags, type Tag as Tag, type TagDeleteResponse as TagDeleteResponse, TagsSinglePage as TagsSinglePage, type TagCreateParams as TagCreateParams, type TagUpdateParams as TagUpdateParams, type TagListParams as TagListParams, type TagDeleteParams as TagDeleteParams, type TagGetParams as TagGetParams, };
    export { Policies as Policies, type ApprovalGroup as ApprovalGroup, type Policy as Policy, type PolicyCreateResponse as PolicyCreateResponse, type PolicyUpdateResponse as PolicyUpdateResponse, type PolicyListResponse as PolicyListResponse, type PolicyDeleteResponse as PolicyDeleteResponse, type PolicyGetResponse as PolicyGetResponse, PolicyListResponsesSinglePage as PolicyListResponsesSinglePage, type PolicyCreateParams as PolicyCreateParams, type PolicyUpdateParams as PolicyUpdateParams, type PolicyListParams as PolicyListParams, type PolicyDeleteParams as PolicyDeleteParams, type PolicyGetParams as PolicyGetParams, };
}
//# sourceMappingURL=access.d.ts.map