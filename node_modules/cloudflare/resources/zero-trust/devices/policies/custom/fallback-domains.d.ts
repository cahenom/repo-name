import { APIResource } from "../../../../../resource.js";
import * as Core from "../../../../../core.js";
import * as PoliciesAPI from "../policies.js";
export declare class FallbackDomains extends APIResource {
    /**
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will
     * use the specified local DNS resolver instead. This will only apply to the
     * specified device settings profile.
     */
    update(policyId: string, params: FallbackDomainUpdateParams, options?: Core.RequestOptions): Core.APIPromise<FallbackDomainUpdateResponse | null>;
    /**
     * Fetches the list of domains to bypass Gateway DNS resolution from a specified
     * device settings profile. These domains will use the specified local DNS resolver
     * instead.
     */
    get(policyId: string, params: FallbackDomainGetParams, options?: Core.RequestOptions): Core.APIPromise<FallbackDomainGetResponse | null>;
}
export type FallbackDomainUpdateResponse = Array<PoliciesAPI.FallbackDomain>;
export type FallbackDomainGetResponse = Array<PoliciesAPI.FallbackDomain>;
export interface FallbackDomainUpdateParams {
    /**
     * Path param:
     */
    account_id: string;
    /**
     * Body param:
     */
    domains: Array<PoliciesAPI.FallbackDomainParam>;
}
export interface FallbackDomainGetParams {
    account_id: string;
}
export declare namespace FallbackDomains {
    export { type FallbackDomainUpdateResponse as FallbackDomainUpdateResponse, type FallbackDomainGetResponse as FallbackDomainGetResponse, type FallbackDomainUpdateParams as FallbackDomainUpdateParams, type FallbackDomainGetParams as FallbackDomainGetParams, };
}
//# sourceMappingURL=fallback-domains.d.ts.map