import { APIResource } from "../../../../../resource.js";
import * as Core from "../../../../../core.js";
import * as PoliciesAPI from "../policies.js";
export declare class Excludes extends APIResource {
    /**
     * Sets the list of routes excluded from the WARP client's tunnel.
     */
    update(params: ExcludeUpdateParams, options?: Core.RequestOptions): Core.APIPromise<ExcludeUpdateResponse | null>;
    /**
     * Fetches the list of routes excluded from the WARP client's tunnel.
     */
    get(params: ExcludeGetParams, options?: Core.RequestOptions): Core.APIPromise<ExcludeGetResponse | null>;
}
export type ExcludeUpdateResponse = Array<PoliciesAPI.SplitTunnelExclude>;
export type ExcludeGetResponse = Array<PoliciesAPI.SplitTunnelExclude>;
export interface ExcludeUpdateParams {
    /**
     * Path param:
     */
    account_id: string;
    /**
     * Body param:
     */
    body: Array<PoliciesAPI.SplitTunnelExcludeParam>;
}
export interface ExcludeGetParams {
    account_id: string;
}
export declare namespace Excludes {
    export { type ExcludeUpdateResponse as ExcludeUpdateResponse, type ExcludeGetResponse as ExcludeGetResponse, type ExcludeUpdateParams as ExcludeUpdateParams, type ExcludeGetParams as ExcludeGetParams, };
}
//# sourceMappingURL=excludes.d.ts.map