import { APIResource } from "../../../../../resource.js";
import * as Core from "../../../../../core.js";
import * as PoliciesAPI from "../policies.js";
import * as CertificatesAPI from "./certificates.js";
import { CertificateEditParams, CertificateEditResponse, CertificateGetParams, CertificateGetResponse, Certificates } from "./certificates.js";
import * as ExcludesAPI from "./excludes.js";
import { ExcludeGetParams, ExcludeGetResponse, ExcludeUpdateParams, ExcludeUpdateResponse, Excludes } from "./excludes.js";
import * as FallbackDomainsAPI from "./fallback-domains.js";
import { FallbackDomainGetParams, FallbackDomainGetResponse, FallbackDomainUpdateParams, FallbackDomainUpdateResponse, FallbackDomains } from "./fallback-domains.js";
import * as IncludesAPI from "./includes.js";
import { IncludeGetParams, IncludeGetResponse, IncludeUpdateParams, IncludeUpdateResponse, Includes } from "./includes.js";
export declare class Default extends APIResource {
    excludes: ExcludesAPI.Excludes;
    includes: IncludesAPI.Includes;
    fallbackDomains: FallbackDomainsAPI.FallbackDomains;
    certificates: CertificatesAPI.Certificates;
    /**
     * Updates the default device settings profile for an account.
     */
    edit(params: DefaultEditParams, options?: Core.RequestOptions): Core.APIPromise<DefaultEditResponse | null>;
    /**
     * Fetches the default device settings profile for an account.
     */
    get(params: DefaultGetParams, options?: Core.RequestOptions): Core.APIPromise<DefaultGetResponse | null>;
}
export interface DefaultEditResponse {
    /**
     * Whether to allow the user to switch WARP between modes.
     */
    allow_mode_switch?: boolean;
    /**
     * Whether to receive update notifications when a new version of the client is
     * available.
     */
    allow_updates?: boolean;
    /**
     * Whether to allow devices to leave the organization.
     */
    allowed_to_leave?: boolean;
    /**
     * The amount of time in minutes to reconnect after having been disabled.
     */
    auto_connect?: number;
    /**
     * Turn on the captive portal after the specified amount of time.
     */
    captive_portal?: number;
    /**
     * Whether the policy will be applied to matching devices.
     */
    default?: boolean;
    /**
     * If the `dns_server` field of a fallback domain is not present, the client will
     * fall back to a best guess of the default/system DNS resolvers unless this policy
     * option is set to `true`.
     */
    disable_auto_fallback?: boolean;
    /**
     * Whether the policy will be applied to matching devices.
     */
    enabled?: boolean;
    exclude?: Array<PoliciesAPI.SplitTunnelExclude>;
    /**
     * Whether to add Microsoft IPs to Split Tunnel exclusions.
     */
    exclude_office_ips?: boolean;
    fallback_domains?: Array<PoliciesAPI.FallbackDomain>;
    gateway_unique_id?: string;
    include?: Array<PoliciesAPI.SplitTunnelInclude>;
    service_mode_v2?: DefaultEditResponse.ServiceModeV2;
    /**
     * The URL to launch when the Send Feedback button is clicked.
     */
    support_url?: string;
    /**
     * Whether to allow the user to turn off the WARP switch and disconnect the client.
     */
    switch_locked?: boolean;
    /**
     * Determines which tunnel protocol to use.
     */
    tunnel_protocol?: string;
}
export declare namespace DefaultEditResponse {
    interface ServiceModeV2 {
        /**
         * The mode to run the WARP client under.
         */
        mode?: string;
        /**
         * The port number when used with proxy mode.
         */
        port?: number;
    }
}
export interface DefaultGetResponse {
    /**
     * Whether to allow the user to switch WARP between modes.
     */
    allow_mode_switch?: boolean;
    /**
     * Whether to receive update notifications when a new version of the client is
     * available.
     */
    allow_updates?: boolean;
    /**
     * Whether to allow devices to leave the organization.
     */
    allowed_to_leave?: boolean;
    /**
     * The amount of time in minutes to reconnect after having been disabled.
     */
    auto_connect?: number;
    /**
     * Turn on the captive portal after the specified amount of time.
     */
    captive_portal?: number;
    /**
     * Whether the policy will be applied to matching devices.
     */
    default?: boolean;
    /**
     * If the `dns_server` field of a fallback domain is not present, the client will
     * fall back to a best guess of the default/system DNS resolvers unless this policy
     * option is set to `true`.
     */
    disable_auto_fallback?: boolean;
    /**
     * Whether the policy will be applied to matching devices.
     */
    enabled?: boolean;
    exclude?: Array<PoliciesAPI.SplitTunnelExclude>;
    /**
     * Whether to add Microsoft IPs to Split Tunnel exclusions.
     */
    exclude_office_ips?: boolean;
    fallback_domains?: Array<PoliciesAPI.FallbackDomain>;
    gateway_unique_id?: string;
    include?: Array<PoliciesAPI.SplitTunnelInclude>;
    service_mode_v2?: DefaultGetResponse.ServiceModeV2;
    /**
     * The URL to launch when the Send Feedback button is clicked.
     */
    support_url?: string;
    /**
     * Whether to allow the user to turn off the WARP switch and disconnect the client.
     */
    switch_locked?: boolean;
    /**
     * Determines which tunnel protocol to use.
     */
    tunnel_protocol?: string;
}
export declare namespace DefaultGetResponse {
    interface ServiceModeV2 {
        /**
         * The mode to run the WARP client under.
         */
        mode?: string;
        /**
         * The port number when used with proxy mode.
         */
        port?: number;
    }
}
export interface DefaultEditParams {
    /**
     * Path param:
     */
    account_id: string;
    /**
     * Body param: Whether to allow the user to switch WARP between modes.
     */
    allow_mode_switch?: boolean;
    /**
     * Body param: Whether to receive update notifications when a new version of the
     * client is available.
     */
    allow_updates?: boolean;
    /**
     * Body param: Whether to allow devices to leave the organization.
     */
    allowed_to_leave?: boolean;
    /**
     * Body param: The amount of time in minutes to reconnect after having been
     * disabled.
     */
    auto_connect?: number;
    /**
     * Body param: Turn on the captive portal after the specified amount of time.
     */
    captive_portal?: number;
    /**
     * Body param: If the `dns_server` field of a fallback domain is not present, the
     * client will fall back to a best guess of the default/system DNS resolvers unless
     * this policy option is set to `true`.
     */
    disable_auto_fallback?: boolean;
    /**
     * Body param: Whether to add Microsoft IPs to Split Tunnel exclusions.
     */
    exclude_office_ips?: boolean;
    /**
     * Body param:
     */
    service_mode_v2?: DefaultEditParams.ServiceModeV2;
    /**
     * Body param: The URL to launch when the Send Feedback button is clicked.
     */
    support_url?: string;
    /**
     * Body param: Whether to allow the user to turn off the WARP switch and disconnect
     * the client.
     */
    switch_locked?: boolean;
    /**
     * Body param: Determines which tunnel protocol to use.
     */
    tunnel_protocol?: string;
}
export declare namespace DefaultEditParams {
    interface ServiceModeV2 {
        /**
         * The mode to run the WARP client under.
         */
        mode?: string;
        /**
         * The port number when used with proxy mode.
         */
        port?: number;
    }
}
export interface DefaultGetParams {
    account_id: string;
}
export declare namespace Default {
    export { type DefaultEditResponse as DefaultEditResponse, type DefaultGetResponse as DefaultGetResponse, type DefaultEditParams as DefaultEditParams, type DefaultGetParams as DefaultGetParams, };
    export { Excludes as Excludes, type ExcludeUpdateResponse as ExcludeUpdateResponse, type ExcludeGetResponse as ExcludeGetResponse, type ExcludeUpdateParams as ExcludeUpdateParams, type ExcludeGetParams as ExcludeGetParams, };
    export { Includes as Includes, type IncludeUpdateResponse as IncludeUpdateResponse, type IncludeGetResponse as IncludeGetResponse, type IncludeUpdateParams as IncludeUpdateParams, type IncludeGetParams as IncludeGetParams, };
    export { FallbackDomains as FallbackDomains, type FallbackDomainUpdateResponse as FallbackDomainUpdateResponse, type FallbackDomainGetResponse as FallbackDomainGetResponse, type FallbackDomainUpdateParams as FallbackDomainUpdateParams, type FallbackDomainGetParams as FallbackDomainGetParams, };
    export { Certificates as Certificates, type CertificateEditResponse as CertificateEditResponse, type CertificateGetResponse as CertificateGetResponse, type CertificateEditParams as CertificateEditParams, type CertificateGetParams as CertificateGetParams, };
}
//# sourceMappingURL=default.d.ts.map