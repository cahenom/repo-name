// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../../resource.mjs";
import * as ConfigurationsAPI from "./configurations.mjs";
import { Configurations, } from "./configurations.mjs";
import * as ConnectionsAPI from "./connections.mjs";
import { Connections, } from "./connections.mjs";
import * as ConnectorsAPI from "./connectors.mjs";
import { Connectors } from "./connectors.mjs";
import * as ManagementAPI from "./management.mjs";
import { Management } from "./management.mjs";
import * as TokenAPI from "./token.mjs";
import { Token } from "./token.mjs";
import * as WARPConnectorAPI from "./warp-connector.mjs";
import { WARPConnector, WARPConnectorListResponsesV4PagePaginationArray, } from "./warp-connector.mjs";
import { V4PagePaginationArray } from "../../../pagination.mjs";
export class Tunnels extends APIResource {
    constructor() {
        super(...arguments);
        this.warpConnector = new WARPConnectorAPI.WARPConnector(this._client);
        this.configurations = new ConfigurationsAPI.Configurations(this._client);
        this.connections = new ConnectionsAPI.Connections(this._client);
        this.token = new TokenAPI.Token(this._client);
        this.connectors = new ConnectorsAPI.Connectors(this._client);
        this.management = new ManagementAPI.Management(this._client);
    }
    /**
     * Creates a new Cloudflare Tunnel in an account.
     */
    create(params, options) {
        const { account_id, ...body } = params;
        return this._client.post(`/accounts/${account_id}/cfd_tunnel`, { body, ...options })._thenUnwrap((obj) => obj.result);
    }
    /**
     * Lists and filters Cloudflare Tunnels in an account.
     */
    list(params, options) {
        const { account_id, ...query } = params;
        return this._client.getAPIList(`/accounts/${account_id}/cfd_tunnel`, TunnelListResponsesV4PagePaginationArray, { query, ...options });
    }
    /**
     * Deletes a Cloudflare Tunnel from an account.
     */
    delete(tunnelId, params, options) {
        const { account_id } = params;
        return this._client.delete(`/accounts/${account_id}/cfd_tunnel/${tunnelId}`, options)._thenUnwrap((obj) => obj.result);
    }
    /**
     * Updates an existing Cloudflare Tunnel.
     */
    edit(tunnelId, params, options) {
        const { account_id, ...body } = params;
        return this._client.patch(`/accounts/${account_id}/cfd_tunnel/${tunnelId}`, {
            body,
            ...options,
        })._thenUnwrap((obj) => obj.result);
    }
    /**
     * Fetches a single Cloudflare Tunnel.
     */
    get(tunnelId, params, options) {
        const { account_id } = params;
        return this._client.get(`/accounts/${account_id}/cfd_tunnel/${tunnelId}`, options)._thenUnwrap((obj) => obj.result);
    }
}
export class TunnelListResponsesV4PagePaginationArray extends V4PagePaginationArray {
}
Tunnels.TunnelListResponsesV4PagePaginationArray = TunnelListResponsesV4PagePaginationArray;
Tunnels.WARPConnector = WARPConnector;
Tunnels.WARPConnectorListResponsesV4PagePaginationArray = WARPConnectorListResponsesV4PagePaginationArray;
Tunnels.Configurations = Configurations;
Tunnels.Connections = Connections;
Tunnels.Token = Token;
Tunnels.Connectors = Connectors;
Tunnels.Management = Management;
//# sourceMappingURL=tunnels.mjs.map